// Objective-C API for talking to github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/openid4ci Go package.
//   gobind -lang=objc github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/openid4ci
//
// File is generated by gobind. Do not edit.

#ifndef __Openid4ci_H__
#define __Openid4ci_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Api.objc.h"
#include "Walleterror.objc.h"

@class Openid4ciAuthorizeResult;
@class Openid4ciClaim;
@class Openid4ciClientConfig;
@class Openid4ciCredentialDisplay;
@class Openid4ciCredentialOverview;
@class Openid4ciCredentialRequestOpts;
@class Openid4ciDisplayData;
@class Openid4ciInteraction;
@class Openid4ciIssuerDisplay;
@class Openid4ciLogo;

/**
 * AuthorizeResult is the object returned from the Client.Authorize method.
An empty/missing AuthorizationRedirectEndpoint indicates that the wallet is pre-authorized.
 */
@interface Openid4ciAuthorizeResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull authorizationRedirectEndpoint;
@property (nonatomic) BOOL userPINRequired;
@end

/**
 * Claim represents display data for a specific claim.
 */
@interface Openid4ciClaim : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Label returns the display label for this claim.
For example, if the UI were to display "Given Name: Alice", then the Label would be "Given Name".
 */
- (NSString* _Nonnull)label;
/**
 * Locale returns the locale corresponding to this claim's display data.
The locale is determined during the ResolveDisplay call based on the preferred locale passed in and what
localizations were provided in the issuer's metadata.
 */
- (NSString* _Nonnull)locale;
/**
 * Value returns the display value for this claim.
For example, if the UI were to display "Given Name: Alice", then the Value would be "Alice".
 */
- (NSString* _Nonnull)value;
@end

/**
 * ClientConfig contains various parameters for an OpenID4CI Interaction.
ActivityLogger is optional, but if provided then activities will be logged there.
If not provided, then no activities will be logged.
 */
@interface Openid4ciClientConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClientConfig creates the client config object.
ActivityLogger is optional, but if provided then activities will be logged there.
If not provided, then no activities will be logged.
 */
- (nullable instancetype)init:(NSString* _Nullable)userDID clientID:(NSString* _Nullable)clientID signerCreator:(id<ApiDIDJWTSignerCreator> _Nullable)signerCreator didRes:(id<ApiDIDResolver> _Nullable)didRes activityLogger:(id<ApiActivityLogger> _Nullable)activityLogger;
@property (nonatomic) NSString* _Nonnull userDID;
@property (nonatomic) NSString* _Nonnull clientID;
@property (nonatomic) id<ApiDIDJWTSignerCreator> _Nullable signerCreator;
@property (nonatomic) id<ApiDIDResolver> _Nullable didResolver;
@property (nonatomic) id<ApiActivityLogger> _Nullable activityLogger;
@end

/**
 * CredentialDisplay represents display data for a credential.
Display data for specific claims (e.g. first name, date of birth, etc.) are in the Claims objects.
 */
@interface Openid4ciCredentialDisplay : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * ClaimAtIndex returns the claim display object at the given index.
If the index passed in is out of bounds, then nil is returned.
 */
- (Openid4ciClaim* _Nullable)claimAtIndex:(long)index;
/**
 * ClaimsLength returns the number of claims displays contained within this CredentialDisplay object.
 */
- (long)claimsLength;
/**
 * Overview returns the credential overview display object.
 */
- (Openid4ciCredentialOverview* _Nullable)overview;
/**
 * Serialize serializes this CredentialDisplay object into JSON.
 */
- (NSString* _Nonnull)serialize:(NSError* _Nullable* _Nullable)error;
@end

/**
 * CredentialOverview represents display data for a credential as a whole.
 */
@interface Openid4ciCredentialOverview : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * BackgroundColor returns the background color that should be used when displaying this credential.
 */
- (NSString* _Nonnull)backgroundColor;
/**
 * Locale returns the locale corresponding to this credential overview's display data.
The locale is determined during the ResolveDisplay call based on the preferred locale passed in and what
localizations were provided in the issuer's metadata.
 */
- (NSString* _Nonnull)locale;
/**
 * Logo returns display logo data for the credential.
 */
- (Openid4ciLogo* _Nullable)logo;
/**
 * Name returns the display name for the credential.
 */
- (NSString* _Nonnull)name;
/**
 * TextColor returns the text color that should be used when displaying this credential.
 */
- (NSString* _Nonnull)textColor;
@end

/**
 * CredentialRequestOpts represents the data (required and optional) that is used in the
final step of the OpenID4CI flow, where the wallet requests the credential from the issuer.
 */
@interface Openid4ciCredentialRequestOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewCredentialRequestOpts returns a new NewCredentialRequestOpts object.
 */
- (nullable instancetype)init:(NSString* _Nullable)userPIN;
@property (nonatomic) NSString* _Nonnull userPIN;
@end

/**
 * DisplayData represents display information for some issued credentials based on an issuer's metadata.
 */
@interface Openid4ciDisplayData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * CredentialDisplayAtIndex returns the credential display object at the given index.
If the index passed in is out of bounds, then nil is returned.
 */
- (Openid4ciCredentialDisplay* _Nullable)credentialDisplayAtIndex:(long)index;
/**
 * CredentialDisplaysLength returns the number of credential displays contained within this DisplayData object.
 */
- (long)credentialDisplaysLength;
/**
 * IssuerDisplay returns the issuer display object.
 */
- (Openid4ciIssuerDisplay* _Nullable)issuerDisplay;
/**
 * Serialize serializes this DisplayData object into JSON.
 */
- (NSString* _Nonnull)serialize:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Interaction represents a single OpenID4CI interaction between a wallet and an issuer. The methods defined on this
object are used to help guide the calling code through the OpenID4CI flow.
 */
@interface Openid4ciInteraction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewInteraction creates a new OpenID4CI Interaction.
The methods defined on this object are used to help guide the calling code through the OpenID4CI flow.
Calling this function represents taking the first step in the flow.
This function takes in an Initiate Issuance Request object from an issuer (as defined in
https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-5.1), encoded using URL query
parameters. This object is intended for going through the full flow only once (i.e. one interaction), after which
it should be discarded. Any new interactions should use a fresh Interaction instance.
If no ActivityLogger is provided (via the ClientConfig object), then no activity logging will take place.
 */
- (nullable instancetype)init:(NSString* _Nullable)initiateIssuanceURI config:(Openid4ciClientConfig* _Nullable)config;
/**
 * Authorize is used by a wallet to authorize an issuer's OIDC Verifiable Credential Issuance Request.
After initializing the Interaction object with an Issuance Request, this should be the first method you call in
order to continue with the flow.
It only supports the pre-authorized flow in its current implementation.
Once the authorization flow is implemented, the following section of the spec will be relevant:
https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-6
 */
- (Openid4ciAuthorizeResult* _Nullable)authorize:(NSError* _Nullable* _Nullable)error;
/**
 * IssuerURI returns the issuer's URI from the initiation request. It's useful to store this somewhere in case
there's a later need to refresh credential display data using the latest display information from the issuer.
 */
- (NSString* _Nonnull)issuerURI;
/**
 * RequestCredential is the final step (or second last step, if the ResolveDisplay method isn't needed) in the
interaction. This is called after the wallet is authorized and is ready to receive credential(s).
Relevant sections of the spec:
https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-7
https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-8
 */
- (ApiVerifiableCredentialsArray* _Nullable)requestCredential:(Openid4ciCredentialRequestOpts* _Nullable)credentialRequest error:(NSError* _Nullable* _Nullable)error;
/**
 * ResolveDisplay is the optional final step that can be called after RequestCredential. It resolves display
information for the credentials received in this interaction. The CredentialDisplays in the returned
object correspond to the VCs received and are in the same order.
If preferredLocale is not specified, then the first locale specified by the issuer's metadata will be used during
resolution.
 */
- (Openid4ciDisplayData* _Nullable)resolveDisplay:(NSString* _Nullable)preferredLocale error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * IssuerDisplay represents display information about the issuer of some credential(s).
 */
@interface Openid4ciIssuerDisplay : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Locale returns the locale corresponding to this issuer's display name.
The locale is determined during the ResolveDisplay call based on the preferred locale passed in and what
localizations were provided in the issuer's metadata.
 */
- (NSString* _Nonnull)locale;
/**
 * Name returns the issuer's display name.
 */
- (NSString* _Nonnull)name;
/**
 * Serialize serializes this IssuerDisplay object into JSON.
 */
- (NSString* _Nonnull)serialize:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Logo represents display information for a logo.
 */
@interface Openid4ciLogo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AltText returns alt text for this logo.
 */
- (NSString* _Nonnull)altText;
/**
 * URL returns the URL where this logo's image can be fetched.
 */
- (NSString* _Nonnull)url;
@end

/**
 * NewClientConfig creates the client config object.
ActivityLogger is optional, but if provided then activities will be logged there.
If not provided, then no activities will be logged.
 */
FOUNDATION_EXPORT Openid4ciClientConfig* _Nullable Openid4ciNewClientConfig(NSString* _Nullable userDID, NSString* _Nullable clientID, id<ApiDIDJWTSignerCreator> _Nullable signerCreator, id<ApiDIDResolver> _Nullable didRes, id<ApiActivityLogger> _Nullable activityLogger);

/**
 * NewCredentialRequestOpts returns a new NewCredentialRequestOpts object.
 */
FOUNDATION_EXPORT Openid4ciCredentialRequestOpts* _Nullable Openid4ciNewCredentialRequestOpts(NSString* _Nullable userPIN);

/**
 * NewInteraction creates a new OpenID4CI Interaction.
The methods defined on this object are used to help guide the calling code through the OpenID4CI flow.
Calling this function represents taking the first step in the flow.
This function takes in an Initiate Issuance Request object from an issuer (as defined in
https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-5.1), encoded using URL query
parameters. This object is intended for going through the full flow only once (i.e. one interaction), after which
it should be discarded. Any new interactions should use a fresh Interaction instance.
If no ActivityLogger is provided (via the ClientConfig object), then no activity logging will take place.
 */
FOUNDATION_EXPORT Openid4ciInteraction* _Nullable Openid4ciNewInteraction(NSString* _Nullable initiateIssuanceURI, Openid4ciClientConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * ParseCredentialDisplay parses the given serialized credential display data and returns a CredentialDisplay object.
 */
FOUNDATION_EXPORT Openid4ciCredentialDisplay* _Nullable Openid4ciParseCredentialDisplay(NSString* _Nullable credentialDisplay, NSError* _Nullable* _Nullable error);

/**
 * ParseDisplayData parses the given serialized display data and returns a DisplayData object.
 */
FOUNDATION_EXPORT Openid4ciDisplayData* _Nullable Openid4ciParseDisplayData(NSString* _Nullable displayData, NSError* _Nullable* _Nullable error);

/**
 * ParseIssuerDisplay parses the given serialized issuer display data and returns an IssuerDisplay object.
 */
FOUNDATION_EXPORT Openid4ciIssuerDisplay* _Nullable Openid4ciParseIssuerDisplay(NSString* _Nullable issuerDisplay, NSError* _Nullable* _Nullable error);

/**
 * ResolveDisplay resolves display information for issued credentials based on an issuer's metadata, which is fetched
using the issuer's (base) URI.
The CredentialDisplays in the returned DisplayData object correspond to the VCs passed in and are in the
same order.
This method requires one or more VCs and the issuer's base URI.
The display values are resolved per the 27 October 2022 revision of the OpenID4CI spec:
https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-11.2
 */
FOUNDATION_EXPORT Openid4ciDisplayData* _Nullable Openid4ciResolveDisplay(ApiVerifiableCredentialsArray* _Nullable vcs, NSString* _Nullable issuerURI, NSString* _Nullable preferredLocale, NSError* _Nullable* _Nullable error);

#endif
