// Objective-C API for talking to github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/localkms Go package.
//   gobind -lang=objc github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/localkms
//
// File is generated by gobind. Do not edit.

#ifndef __Localkms_H__
#define __Localkms_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Api.objc.h"

@class LocalkmsKMS;
@class LocalkmsMemKMSStore;
@class LocalkmsResult;
@class LocalkmsSignerCreator;
@protocol LocalkmsStore;
@class LocalkmsStore;

@protocol LocalkmsStore <NSObject>
/**
 * Get retrieves the key stored under the given keysetID.
The returned result indicates whether a key was found and, if so, the key bytes.
If a key was not found, then Result.Found should be set accordingly - no error should be returned in this case.
 */
- (LocalkmsResult* _Nullable)get:(NSString* _Nullable)keysetID error:(NSError* _Nullable* _Nullable)error;
/**
 * Put stores the given key under the given keysetID.
 */
- (BOOL)put:(NSString* _Nullable)keysetID key:(NSData* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * KMS is a KMS implementation that uses Google's Tink crypto library.
Private keys may intermittently reside in local memory with this implementation so
keep this consideration in mind when deciding whether to use this or not.
 */
@interface LocalkmsKMS : NSObject <goSeqRefInterface, ApiKeyReader, ApiKeyWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewKMS returns a new local KMS instance.
 */
- (nullable instancetype)init:(id<LocalkmsStore> _Nullable)kmsStore;
/**
 * Create creates a keyset of the given keyType and then writes it to storage.
The keyID and raw public key bytes of the newly generated keyset are returned.
Currently, this method only supports creating ED25519 keys.
 */
- (ApiKeyHandle* _Nullable)create:(NSString* _Nullable)keyType error:(NSError* _Nullable* _Nullable)error;
/**
 * ExportPubKey returns the public key associated with the given keyID as raw bytes.
 */
- (NSData* _Nullable)exportPubKey:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetCrypto returns Crypto instance that can perform crypto ops with keys created by this kms.
 */
- (id<ApiCrypto> _Nullable)getCrypto;
@end

/**
 * MemKMSStore is a simple in-memory KMS store implementation.
 */
@interface LocalkmsMemKMSStore : NSObject <goSeqRefInterface, LocalkmsStore> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMemKMSStore returns a new MemKMSStore.
 */
- (nullable instancetype)init;
/**
 * Get retrieves the key stored under the given keysetID.
The returned result indicates whether a key was found and, if so, the key bytes.
If a key was not found, then Result.Found will be false and no error will be returned.
 */
- (LocalkmsResult* _Nullable)get:(NSString* _Nullable)keysetID error:(NSError* _Nullable* _Nullable)error;
/**
 * Put stores the given key under the given keysetID.
 */
- (BOOL)put:(NSString* _Nullable)keysetID key:(NSData* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Result indicates the result of a key retrieval operation (see Store.Get for more info).
 */
@interface LocalkmsResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Found indicates whether a key was found stored under the given keysetID.
If this is false, then Key should be nil. If this is true, then Key should not be nil.
 */
@property (nonatomic) BOOL found;
/**
 * Key is the retrieved key bytes.
 */
@property (nonatomic) NSData* _Nullable key;
@end

/**
 * SignerCreator is an api.DIDJWTSignerCreator implementation that uses an in-memory KMS and the aries-framework-go
Tink crypto implementation.
 */
@interface LocalkmsSignerCreator : NSObject <goSeqRefInterface, ApiDIDJWTSignerCreator> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSignerCreator used to generate constructor for SignerCreator.
 */
- (nullable instancetype)init:(LocalkmsKMS* _Nullable)kms;
/**
 * Create returns a corresponding Signer type for the given DID doc verificationMethod object.
 */
- (id<ApiSigner> _Nullable)create:(ApiJSONObject* _Nullable)verificationMethod error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * KeyTypeED25519 is the name recognized by the Create method for creating an ED25519 keyset.
 */
FOUNDATION_EXPORT NSString* _Nonnull const LocalkmsKeyTypeED25519;

/**
 * CreateSignerCreator returns a type that can be passed in to an OpenID4CI interaction to facilitate JWT signing.
It uses an in-memory KMS and the aries-framework-go Tink crypto implementation for signing operations.
 */
FOUNDATION_EXPORT LocalkmsSignerCreator* _Nullable LocalkmsCreateSignerCreator(LocalkmsKMS* _Nullable kms, NSError* _Nullable* _Nullable error);

/**
 * NewKMS returns a new local KMS instance.
 */
FOUNDATION_EXPORT LocalkmsKMS* _Nullable LocalkmsNewKMS(id<LocalkmsStore> _Nullable kmsStore, NSError* _Nullable* _Nullable error);

/**
 * NewMemKMSStore returns a new MemKMSStore.
 */
FOUNDATION_EXPORT LocalkmsMemKMSStore* _Nullable LocalkmsNewMemKMSStore(void);

/**
 * NewSignerCreator used to generate constructor for SignerCreator.
 */
FOUNDATION_EXPORT LocalkmsSignerCreator* _Nullable LocalkmsNewSignerCreator(LocalkmsKMS* _Nullable kms, NSError* _Nullable* _Nullable error);

@class LocalkmsStore;

/**
 * Store defines the storage capability for local KMS.
 */
@interface LocalkmsStore : NSObject <goSeqRefInterface, LocalkmsStore> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Get retrieves the key stored under the given keysetID.
The returned result indicates whether a key was found and, if so, the key bytes.
If a key was not found, then Result.Found should be set accordingly - no error should be returned in this case.
 */
- (LocalkmsResult* _Nullable)get:(NSString* _Nullable)keysetID error:(NSError* _Nullable* _Nullable)error;
/**
 * Put stores the given key under the given keysetID.
 */
- (BOOL)put:(NSString* _Nullable)keysetID key:(NSData* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
@end

#endif
